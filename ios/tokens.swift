import SwiftUI

class DesignTokens {
  class Color_ {
    static let primitiveColorBlack_alpha1 = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 0)
    static let primitiveColorBlack_alpha2 = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 0.019999999552965164)
    static let primitiveColorBlack_alpha3 = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 0.03999999910593033)
    static let primitiveColorBlack_alpha4 = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 0.07999999821186066)
    static let primitiveColorBlack_alpha5 = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 0.11999999731779099)
    static let primitiveColorBlack_alpha6 = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 0.20000000298023224)
    static let primitiveColorBlack_alpha7 = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 0.2800000011920929)
    static let primitiveColorBlack_alpha8 = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 0.47999998927116394)
    static let primitiveColorBlack_alpha9 = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 0.6000000238418579)
    static let primitiveColorBlack_alpha10 = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 0.7200000286102295)
    static let primitiveColorBlack_alpha12 = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 0.800000011920929)
    static let primitiveColorBlack_alpha13 = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 0.8999999761581421)
    static let primitiveColorBlue1 = Color(red: 0.98824, green: 0.99216, blue: 1.0, opacity: 1)
    static let primitiveColorBlue2 = Color(red: 0.96471, green: 0.97255, blue: 1.0, opacity: 1)
    static let primitiveColorBlue3 = Color(red: 0.94118, green: 0.94902, blue: 1.0, opacity: 1)
    static let primitiveColorBlue4 = Color(red: 0.91765, green: 0.92941, blue: 1.0, opacity: 1)
    static let primitiveColorBlue5 = Color(red: 0.88627, green: 0.90588, blue: 1.0, opacity: 1)
    static let primitiveColorBlue6 = Color(red: 0.85882, green: 0.88235, blue: 1.0, opacity: 1)
    static let primitiveColorBlue7 = Color(red: 0.83529, green: 0.86275, blue: 1.0, opacity: 1)
    static let primitiveColorBlue8 = Color(red: 0.77255, green: 0.81569, blue: 1.0, opacity: 1)
    static let primitiveColorBlue9 = Color(red: 0.72941, green: 0.78039, blue: 1.0, opacity: 1)
    static let primitiveColorBlue10 = Color(red: 0.59216, green: 0.67843, blue: 1.0, opacity: 1)
    static let primitiveColorBlue11 = Color(red: 0.25490, green: 0.53333, blue: 1.0, opacity: 1)
    static let primitiveColorBlue12 = Color(red: 0.0, green: 0.44314, blue: 0.91373, opacity: 1)
    static let primitiveColorBlue13 = Color(red: 0.0, green: 0.35686, blue: 0.82745, opacity: 1)
    static let primitiveColorBlue14 = Color(red: 0.0, green: 0.25882, blue: 0.60000, opacity: 1)
    static let primitiveColorBlue15 = Color(red: 0.0, green: 0.18039, blue: 0.41569, opacity: 1)
    static let primitiveColorBlue16 = Color(red: 0.0, green: 0.08627, blue: 0.20000, opacity: 1)
    static let primitiveColorGray1 = Color(red: 1.0, green: 1.0, blue: 1.0, opacity: 1)
    static let primitiveColorGray2 = Color(red: 0.98824, green: 0.98824, blue: 0.98824, opacity: 1)
    static let primitiveColorGray3 = Color(red: 0.96078, green: 0.96078, blue: 0.96078, opacity: 1)
    static let primitiveColorGray4 = Color(red: 0.93725, green: 0.93725, blue: 0.93725, opacity: 1)
    static let primitiveColorGray5 = Color(red: 0.90980, green: 0.90980, blue: 0.90980, opacity: 1)
    static let primitiveColorGray6 = Color(red: 0.87451, green: 0.87451, blue: 0.87451, opacity: 1)
    static let primitiveColorGray7 = Color(red: 0.78431, green: 0.78431, blue: 0.78431, opacity: 1)
    static let primitiveColorGray8 = Color(red: 0.71765, green: 0.71765, blue: 0.71765, opacity: 1)
    static let primitiveColorGray9 = Color(red: 0.58039, green: 0.58039, blue: 0.58039, opacity: 1)
    static let primitiveColorGray10 = Color(red: 0.46667, green: 0.46667, blue: 0.46667, opacity: 1)
    static let primitiveColorGray11 = Color(red: 0.38039, green: 0.38039, blue: 0.38039, opacity: 1)
    static let primitiveColorGray12 = Color(red: 0.33333, green: 0.33333, blue: 0.33333, opacity: 1)
    static let primitiveColorGray13 = Color(red: 0.24706, green: 0.24706, blue: 0.24706, opacity: 1)
    static let primitiveColorGray14 = Color(red: 0.21961, green: 0.21961, blue: 0.21961, opacity: 1)
    static let primitiveColorGray15 = Color(red: 0.16471, green: 0.16471, blue: 0.16471, opacity: 1)
    static let primitiveColorGray16 = Color(red: 0.12157, green: 0.12157, blue: 0.12157, opacity: 1)
    static let primitiveColorGray17 = Color(red: 0.10196, green: 0.10196, blue: 0.10196, opacity: 1)
    static let primitiveColorGray18 = Color(red: 0.06667, green: 0.06667, blue: 0.06667, opacity: 1)
    static let primitiveColorGray19 = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 1)
    static let primitiveColorGreen1 = Color(red: 0.97255, green: 1.0, blue: 0.98431, opacity: 1)
    static let primitiveColorGreen2 = Color(red: 0.89020, green: 1.0, blue: 0.92941, opacity: 1)
    static let primitiveColorGreen3 = Color(red: 0.80392, green: 0.99608, blue: 0.88235, opacity: 1)
    static let primitiveColorGreen4 = Color(red: 0.70588, green: 0.99608, blue: 0.82353, opacity: 1)
    static let primitiveColorGreen5 = Color(red: 0.57255, green: 0.99608, blue: 0.76078, opacity: 1)
    static let primitiveColorGreen6 = Color(red: 0.38824, green: 0.99216, blue: 0.69020, opacity: 1)
    static let primitiveColorGreen7 = Color(red: 0.21961, green: 0.98039, blue: 0.63922, opacity: 1)
    static let primitiveColorGreen8 = Color(red: 0.20784, green: 0.93333, blue: 0.60784, opacity: 1)
    static let primitiveColorGreen9 = Color(red: 0.19608, green: 0.88235, blue: 0.57647, opacity: 1)
    static let primitiveColorGreen10 = Color(red: 0.18039, green: 0.82745, blue: 0.53725, opacity: 1)
    static let primitiveColorGreen11 = Color(red: 0.19608, green: 0.62745, blue: 0.43137, opacity: 1)
    static let primitiveColorGreen12 = Color(red: 0.16078, green: 0.51765, blue: 0.35294, opacity: 1)
    static let primitiveColorGreen13 = Color(red: 0.07451, green: 0.43529, blue: 0.27059, opacity: 1)
    static let primitiveColorGreen14 = Color(red: 0.04706, green: 0.31765, blue: 0.19608, opacity: 1)
    static let primitiveColorGreen15 = Color(red: 0.03137, green: 0.23922, blue: 0.14510, opacity: 1)
    static let primitiveColorGreen16 = Color(red: 0.03529, green: 0.16471, blue: 0.10588, opacity: 1)
    static let primitiveColorOrange1 = Color(red: 1.0, green: 0.99216, blue: 0.98039, opacity: 1)
    static let primitiveColorOrange2 = Color(red: 1.0, green: 0.96863, blue: 0.93333, opacity: 1)
    static let primitiveColorOrange3 = Color(red: 1.0, green: 0.94510, blue: 0.89020, opacity: 1)
    static let primitiveColorOrange4 = Color(red: 1.0, green: 0.92157, blue: 0.83529, opacity: 1)
    static let primitiveColorOrange5 = Color(red: 1.0, green: 0.89412, blue: 0.77647, opacity: 1)
    static let primitiveColorOrange6 = Color(red: 1.0, green: 0.86667, blue: 0.71373, opacity: 1)
    static let primitiveColorOrange7 = Color(red: 1.0, green: 0.83922, blue: 0.64314, opacity: 1)
    static let primitiveColorOrange8 = Color(red: 1.0, green: 0.78431, blue: 0.47451, opacity: 1)
    static let primitiveColorOrange9 = Color(red: 1.0, green: 0.72157, blue: 0.0, opacity: 1)
    static let primitiveColorOrange10 = Color(red: 0.89804, green: 0.64706, blue: 0.0, opacity: 1)
    static let primitiveColorOrange11 = Color(red: 0.69804, green: 0.51765, blue: 0.0, opacity: 1)
    static let primitiveColorOrange12 = Color(red: 0.58431, green: 0.43529, blue: 0.0, opacity: 1)
    static let primitiveColorOrange13 = Color(red: 0.48627, green: 0.34510, blue: 0.0, opacity: 1)
    static let primitiveColorOrange14 = Color(red: 0.36863, green: 0.25882, blue: 0.0, opacity: 1)
    static let primitiveColorOrange15 = Color(red: 0.25490, green: 0.17647, blue: 0.0, opacity: 1)
    static let primitiveColorOrange16 = Color(red: 0.14510, green: 0.10196, blue: 0.0, opacity: 1)
    static let primitiveColorPurple1 = Color(red: 0.99216, green: 0.99216, blue: 1.0, opacity: 1)
    static let primitiveColorPurple2 = Color(red: 0.97255, green: 0.96863, blue: 1.0, opacity: 1)
    static let primitiveColorPurple3 = Color(red: 0.95294, green: 0.94510, blue: 1.0, opacity: 1)
    static let primitiveColorPurple4 = Color(red: 0.93725, green: 0.92549, blue: 1.0, opacity: 1)
    static let primitiveColorPurple5 = Color(red: 0.91373, green: 0.89804, blue: 1.0, opacity: 1)
    static let primitiveColorPurple6 = Color(red: 0.89412, green: 0.87059, blue: 1.0, opacity: 1)
    static let primitiveColorPurple7 = Color(red: 0.87451, green: 0.85098, blue: 1.0, opacity: 1)
    static let primitiveColorPurple8 = Color(red: 0.83137, green: 0.80000, blue: 1.0, opacity: 1)
    static let primitiveColorPurple9 = Color(red: 0.78039, green: 0.73725, blue: 1.0, opacity: 1)
    static let primitiveColorPurple10 = Color(red: 0.66667, green: 0.58431, blue: 1.0, opacity: 1)
    static let primitiveColorPurple11 = Color(red: 0.58039, green: 0.45490, blue: 1.0, opacity: 1)
    static let primitiveColorPurple12 = Color(red: 0.50196, green: 0.31765, blue: 1.0, opacity: 1)
    static let primitiveColorPurple13 = Color(red: 0.44314, green: 0.14902, blue: 1.0, opacity: 1)
    static let primitiveColorPurple14 = Color(red: 0.34118, green: 0.0, blue: 0.81961, opacity: 1)
    static let primitiveColorPurple15 = Color(red: 0.23137, green: 0.0, blue: 0.57647, opacity: 1)
    static let primitiveColorPurple16 = Color(red: 0.10980, green: 0.0, blue: 0.30980, opacity: 1)
    static let primitiveColorRed1 = Color(red: 1.0, green: 0.98431, blue: 0.98431, opacity: 1)
    static let primitiveColorRed2 = Color(red: 1.0, green: 0.96471, blue: 0.96471, opacity: 1)
    static let primitiveColorRed3 = Color(red: 1.0, green: 0.92941, blue: 0.92549, opacity: 1)
    static let primitiveColorRed4 = Color(red: 0.99608, green: 0.91373, blue: 0.90980, opacity: 1)
    static let primitiveColorRed5 = Color(red: 0.99608, green: 0.88627, blue: 0.88235, opacity: 1)
    static let primitiveColorRed6 = Color(red: 0.99608, green: 0.85490, blue: 0.85098, opacity: 1)
    static let primitiveColorRed7 = Color(red: 0.99608, green: 0.82745, blue: 0.81961, opacity: 1)
    static let primitiveColorRed8 = Color(red: 0.99608, green: 0.76471, blue: 0.75686, opacity: 1)
    static let primitiveColorRed9 = Color(red: 0.99216, green: 0.69020, blue: 0.67451, opacity: 1)
    static let primitiveColorRed10 = Color(red: 0.99216, green: 0.50588, blue: 0.47843, opacity: 1)
    static let primitiveColorRed11 = Color(red: 0.93725, green: 0.30196, blue: 0.18431, opacity: 1)
    static let primitiveColorRed12 = Color(red: 0.89804, green: 0.10980, blue: 0.0, opacity: 1)
    static let primitiveColorRed13 = Color(red: 0.70980, green: 0.14902, blue: 0.04314, opacity: 1)
    static let primitiveColorRed14 = Color(red: 0.55686, green: 0.12157, blue: 0.04314, opacity: 1)
    static let primitiveColorRed15 = Color(red: 0.37255, green: 0.08235, blue: 0.02745, opacity: 1)
    static let primitiveColorRed16 = Color(red: 0.18431, green: 0.03922, blue: 0.01569, opacity: 1)
    static let semanticColorBgBg = Color(red: 1.0, green: 1.0, blue: 1.0, opacity: 1)
    static let semanticColorBgBg_inverse = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 1)
    static let semanticColorBgFillFill_brand_default = Color(red: 0.44314, green: 0.14902, blue: 1.0, opacity: 1)
    static let semanticColorBgFillFill_brand_disabled = Color(red: 0.95294, green: 0.94510, blue: 1.0, opacity: 1)
    static let semanticColorBgFillFill_brand_hover = Color(red: 0.34118, green: 0.0, blue: 0.81961, opacity: 1)
    static let semanticColorBgFillFill_brand_pressed = Color(red: 0.34118, green: 0.0, blue: 0.81961, opacity: 1)
    static let semanticColorBgFillFill_brand_secondary_default = Color(red: 0.93725, green: 0.92549, blue: 1.0, opacity: 1)
    static let semanticColorBgFillFill_brand_secondary_disabled = Color(red: 0.95294, green: 0.94510, blue: 1.0, opacity: 1)
    static let semanticColorBgFillFill_brand_secondary_hover = Color(red: 0.89412, green: 0.87059, blue: 1.0, opacity: 1)
    static let semanticColorBgFillFill_brand_secondary_pressed = Color(red: 0.87451, green: 0.85098, blue: 1.0, opacity: 1)
    static let semanticColorBgFillFill_caution = Color(red: 1.0, green: 0.72157, blue: 0.0, opacity: 1)
    static let semanticColorBgFillFill_caution_active = Color(red: 0.69804, green: 0.51765, blue: 0.0, opacity: 1)
    static let semanticColorBgFillFill_caution_hover = Color(red: 0.89804, green: 0.64706, blue: 0.0, opacity: 1)
    static let semanticColorBgFillFill_caution_secondary = Color(red: 1.0, green: 0.96863, blue: 0.93333, opacity: 1)
    static let semanticColorBgFillFill_critical = Color(red: 0.89804, green: 0.10980, blue: 0.0, opacity: 1)
    static let semanticColorBgFillFill_critical_active = Color(red: 0.55686, green: 0.12157, blue: 0.04314, opacity: 1)
    static let semanticColorBgFillFill_critical_hover = Color(red: 0.70980, green: 0.14902, blue: 0.04314, opacity: 1)
    static let semanticColorBgFillFill_critical_secondary = Color(red: 1.0, green: 0.96471, blue: 0.96471, opacity: 1)
    static let semanticColorBgFillFill_default = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 1)
    static let semanticColorBgFillFill_disabled = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 0.03999999910593033)
    static let semanticColorBgFillFill_hover = Color(red: 0.16471, green: 0.16471, blue: 0.16471, opacity: 1)
    static let semanticColorBgFillFill_info = Color(red: 0.25490, green: 0.53333, blue: 1.0, opacity: 1)
    static let semanticColorBgFillFill_info_active = Color(red: 0.0, green: 0.35686, blue: 0.82745, opacity: 1)
    static let semanticColorBgFillFill_info_hover = Color(red: 0.0, green: 0.44314, blue: 0.91373, opacity: 1)
    static let semanticColorBgFillFill_info_secondary = Color(red: 0.91765, green: 0.92941, blue: 1.0, opacity: 1)
    static let semanticColorBgFillFill_inverse = Color(red: 1.0, green: 1.0, blue: 1.0, opacity: 1)
    static let semanticColorBgFillFill_inverse_active = Color(red: 0.96078, green: 0.96078, blue: 0.96078, opacity: 1)
    static let semanticColorBgFillFill_inverse_hover = Color(red: 0.98824, green: 0.98824, blue: 0.98824, opacity: 1)
    static let semanticColorBgFillFill_pressed = Color(red: 0.21961, green: 0.21961, blue: 0.21961, opacity: 1)
    static let semanticColorBgFillFill_secondary_default = Color(red: 0.90980, green: 0.90980, blue: 0.90980, opacity: 1)
    static let semanticColorBgFillFill_secondary_disabled = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 0.03999999910593033)
    static let semanticColorBgFillFill_secondary_hover = Color(red: 0.87451, green: 0.87451, blue: 0.87451, opacity: 1)
    static let semanticColorBgFillFill_secondary_pressed = Color(red: 0.78431, green: 0.78431, blue: 0.78431, opacity: 1)
    static let semanticColorBgFillFill_success = Color(red: 0.16078, green: 0.51765, blue: 0.35294, opacity: 1)
    static let semanticColorBgFillFill_success_active = Color(red: 0.04706, green: 0.31765, blue: 0.19608, opacity: 1)
    static let semanticColorBgFillFill_success_hover = Color(red: 0.07451, green: 0.43529, blue: 0.27059, opacity: 1)
    static let semanticColorBgFillFill_success_secondary = Color(red: 0.97255, green: 1.0, blue: 0.98431, opacity: 1)
    static let semanticColorBgFillFill_tertiary_default = Color(red: 0.78431, green: 0.78431, blue: 0.78431, opacity: 1)
    static let semanticColorBgFillFill_tertiary_disabled = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 0.03999999910593033)
    static let semanticColorBgFillFill_tertiary_hover = Color(red: 0.71765, green: 0.71765, blue: 0.71765, opacity: 1)
    static let semanticColorBgFillFill_tertiary_pressed = Color(red: 0.58039, green: 0.58039, blue: 0.58039, opacity: 1)
    static let semanticColorBgSurfaceSurface_active = Color(red: 0.93725, green: 0.93725, blue: 0.93725, opacity: 1)
    static let semanticColorBgSurfaceSurface_brand = Color(red: 0.97255, green: 0.96863, blue: 1.0, opacity: 1)
    static let semanticColorBgSurfaceSurface_brand_active = Color(red: 0.89412, green: 0.87059, blue: 1.0, opacity: 1)
    static let semanticColorBgSurfaceSurface_brand_disabled = Color(red: 0.99216, green: 0.99216, blue: 1.0, opacity: 1)
    static let semanticColorBgSurfaceSurface_brand_hover = Color(red: 0.95294, green: 0.94510, blue: 1.0, opacity: 1)
    static let semanticColorBgSurfaceSurface_brand_pressed = Color(red: 0.91373, green: 0.89804, blue: 1.0, opacity: 1)
    static let semanticColorBgSurfaceSurface_caution = Color(red: 1.0, green: 0.96863, blue: 0.93333, opacity: 1)
    static let semanticColorBgSurfaceSurface_caution_active = Color(red: 1.0, green: 0.92157, blue: 0.83529, opacity: 1)
    static let semanticColorBgSurfaceSurface_caution_hover = Color(red: 1.0, green: 0.94510, blue: 0.89020, opacity: 1)
    static let semanticColorBgSurfaceSurface_critical = Color(red: 1.0, green: 0.96471, blue: 0.96471, opacity: 1)
    static let semanticColorBgSurfaceSurface_critical_active = Color(red: 0.99608, green: 0.91373, blue: 0.90980, opacity: 1)
    static let semanticColorBgSurfaceSurface_critical_hover = Color(red: 1.0, green: 0.92941, blue: 0.92549, opacity: 1)
    static let semanticColorBgSurfaceSurface_default = Color(red: 1.0, green: 1.0, blue: 1.0, opacity: 1)
    static let semanticColorBgSurfaceSurface_disabled = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 0.03999999910593033)
    static let semanticColorBgSurfaceSurface_hover = Color(red: 0.98824, green: 0.98824, blue: 0.98824, opacity: 1)
    static let semanticColorBgSurfaceSurface_info = Color(red: 0.94118, green: 0.94902, blue: 1.0, opacity: 1)
    static let semanticColorBgSurfaceSurface_info_active = Color(red: 0.88627, green: 0.90588, blue: 1.0, opacity: 1)
    static let semanticColorBgSurfaceSurface_info_hover = Color(red: 0.91765, green: 0.92941, blue: 1.0, opacity: 1)
    static let semanticColorBgSurfaceSurface_pressed = Color(red: 0.96078, green: 0.96078, blue: 0.96078, opacity: 1)
    static let semanticColorBgSurfaceSurface_success = Color(red: 0.80392, green: 0.99608, blue: 0.88235, opacity: 1)
    static let semanticColorBgSurfaceSurface_success_active = Color(red: 0.57255, green: 0.99608, blue: 0.76078, opacity: 1)
    static let semanticColorBgSurfaceSurface_success_hover = Color(red: 0.70588, green: 0.99608, blue: 0.82353, opacity: 1)
    static let semanticColorBorderBoder_inverse = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 1)
    static let semanticColorBorderBorder = Color(red: 0.90980, green: 0.90980, blue: 0.90980, opacity: 1)
    static let semanticColorBorderBorder_caution = Color(red: 1.0, green: 0.78431, blue: 0.47451, opacity: 1)
    static let semanticColorBorderBorder_critical = Color(red: 0.89804, green: 0.10980, blue: 0.0, opacity: 1)
    static let semanticColorBorderBorder_disabled = Color(red: 0.96078, green: 0.96078, blue: 0.96078, opacity: 1)
    static let semanticColorBorderBorder_hover = Color(red: 0.78431, green: 0.78431, blue: 0.78431, opacity: 1)
    static let semanticColorBorderBorder_info = Color(red: 0.77255, green: 0.81569, blue: 1.0, opacity: 1)
    static let semanticColorBorderBorder_secondary = Color(red: 0.96078, green: 0.96078, blue: 0.96078, opacity: 1)
    static let semanticColorBorderBorder_success = Color(red: 0.57255, green: 0.99608, blue: 0.76078, opacity: 1)
    static let semanticColorBorderBorder_tertiary = Color(red: 0.78431, green: 0.78431, blue: 0.78431, opacity: 1)
    static let semanticColorIconIcon = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 1)
    static let semanticColorIconIcon_active = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 1)
    static let semanticColorIconIcon_brand = Color(red: 0.44314, green: 0.14902, blue: 1.0, opacity: 1)
    static let semanticColorIconIcon_brand_disabled = Color(red: 0.83137, green: 0.80000, blue: 1.0, opacity: 1)
    static let semanticColorIconIcon_brand_secondary = Color(red: 0.44314, green: 0.14902, blue: 1.0, opacity: 1)
    static let semanticColorIconIcon_brand_secondary_disabled = Color(red: 0.83137, green: 0.80000, blue: 1.0, opacity: 1)
    static let semanticColorIconIcon_caution = Color(red: 0.69804, green: 0.51765, blue: 0.0, opacity: 1)
    static let semanticColorIconIcon_critical = Color(red: 0.89804, green: 0.10980, blue: 0.0, opacity: 1)
    static let semanticColorIconIcon_disabled = Color(red: 0.87451, green: 0.87451, blue: 0.87451, opacity: 1)
    static let semanticColorIconIcon_hover = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 1)
    static let semanticColorIconIcon_info = Color(red: 0.25490, green: 0.53333, blue: 1.0, opacity: 1)
    static let semanticColorIconIcon_inverse = Color(red: 1.0, green: 1.0, blue: 1.0, opacity: 1)
    static let semanticColorIconIcon_secondary = Color(red: 0.46667, green: 0.46667, blue: 0.46667, opacity: 1)
    static let semanticColorIconIcon_success = Color(red: 0.16078, green: 0.51765, blue: 0.35294, opacity: 1)
    static let semanticColorIconIcon_tertiary = Color(red: 0.58039, green: 0.58039, blue: 0.58039, opacity: 1)
    static let semanticColorInputBg_surface = Color(red: 1.0, green: 1.0, blue: 1.0, opacity: 1)
    static let semanticColorInputBg_surface_active = Color(red: 0.93725, green: 0.93725, blue: 0.93725, opacity: 1)
    static let semanticColorInputBg_surface_disabled = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 0.03999999910593033)
    static let semanticColorInputBg_surface_hover = Color(red: 0.98824, green: 0.98824, blue: 0.98824, opacity: 1)
    static let semanticColorInputBg_surface_pressed = Color(red: 0.96078, green: 0.96078, blue: 0.96078, opacity: 1)
    static let semanticColorInputBoder = Color(red: 0.90980, green: 0.90980, blue: 0.90980, opacity: 1)
    static let semanticColorInputBoder_disabled = Color(red: 0.90980, green: 0.90980, blue: 0.90980, opacity: 1)
    static let semanticColorInputBoder_hover = Color(red: 0.78431, green: 0.78431, blue: 0.78431, opacity: 1)
    static let semanticColorInputBoder_selected = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 1)
    static let semanticColorTextLinkLink_caution = Color(red: 1.0, green: 0.72157, blue: 0.0, opacity: 1)
    static let semanticColorTextLinkLink_critical = Color(red: 0.55686, green: 0.12157, blue: 0.04314, opacity: 1)
    static let semanticColorTextLinkLink_hover = Color(red: 0.0, green: 0.25882, blue: 0.60000, opacity: 1)
    static let semanticColorTextLinkLink_info = Color(red: 0.0, green: 0.35686, blue: 0.82745, opacity: 1)
    static let semanticColorTextLinkLink_inverse = Color(red: 0.77255, green: 0.81569, blue: 1.0, opacity: 1)
    static let semanticColorTextLinkLink_pressed = Color(red: 0.0, green: 0.18039, blue: 0.41569, opacity: 1)
    static let semanticColorTextLinkLink_success = Color(red: 0.18039, green: 0.82745, blue: 0.53725, opacity: 1)
    static let semanticColorTextText_brand = Color(red: 1.0, green: 1.0, blue: 1.0, opacity: 1)
    static let semanticColorTextText_brand_disabled = Color(red: 0.83137, green: 0.80000, blue: 1.0, opacity: 1)
    static let semanticColorTextText_brand_secondary = Color(red: 0.44314, green: 0.14902, blue: 1.0, opacity: 1)
    static let semanticColorTextText_caution = Color(red: 1.0, green: 0.72157, blue: 0.0, opacity: 1)
    static let semanticColorTextText_caution_active = Color(red: 0.14510, green: 0.10196, blue: 0.0, opacity: 1)
    static let semanticColorTextText_caution_hover = Color(red: 0.25490, green: 0.17647, blue: 0.0, opacity: 1)
    static let semanticColorTextText_critical = Color(red: 0.55686, green: 0.12157, blue: 0.04314, opacity: 1)
    static let semanticColorTextText_critical_active = Color(red: 0.18431, green: 0.03922, blue: 0.01569, opacity: 1)
    static let semanticColorTextText_critical_hover = Color(red: 0.37255, green: 0.08235, blue: 0.02745, opacity: 1)
    static let semanticColorTextText_critical_on_bg_fill = Color(red: 1.0, green: 0.98431, blue: 0.98431, opacity: 1)
    static let semanticColorTextText_disabled = Color(red: 0.87451, green: 0.87451, blue: 0.87451, opacity: 1)
    static let semanticColorTextText_info = Color(red: 0.25490, green: 0.53333, blue: 1.0, opacity: 1)
    static let semanticColorTextText_info_active = Color(red: 0.0, green: 0.35686, blue: 0.82745, opacity: 1)
    static let semanticColorTextText_info_hover = Color(red: 0.0, green: 0.44314, blue: 0.91373, opacity: 1)
    static let semanticColorTextText_inverse = Color(red: 1.0, green: 1.0, blue: 1.0, opacity: 1)
    static let semanticColorTextText_primary = Color(red: 0.0, green: 0.0, blue: 0.0, opacity: 1)
    static let semanticColorTextText_secondary = Color(red: 0.46667, green: 0.46667, blue: 0.46667, opacity: 1)
    static let semanticColorTextText_success = Color(red: 0.18039, green: 0.82745, blue: 0.53725, opacity: 1)
    static let semanticColorTextText_success_active = Color(red: 0.16078, green: 0.51765, blue: 0.35294, opacity: 1)
    static let semanticColorTextText_success_hover = Color(red: 0.19608, green: 0.62745, blue: 0.43137, opacity: 1)
    static let semanticColorTextText_success_on_bg_fill = Color(red: 0.97255, green: 1.0, blue: 0.98431, opacity: 1)
    static let semanticColorTextText_tertiary = Color(red: 0.58039, green: 0.58039, blue: 0.58039, opacity: 1)
    static let semanticColorTextText_warning_on_bg_fill = Color(red: 0.14510, green: 0.10196, blue: 0.0, opacity: 1)
  }

  class Dimension {
    static let primitiveUnitSize_0 = 0
    static let primitiveUnitSize_025 = 1
    static let primitiveUnitSize_050 = 2
    static let primitiveUnitSize_100 = 4
    static let primitiveUnitSize_1000 = 40
    static let primitiveUnitSize_1200 = 48
    static let primitiveUnitSize_150 = 6
    static let primitiveUnitSize_1600 = 64
    static let primitiveUnitSize_200 = 8
    static let primitiveUnitSize_2000 = 80
    static let primitiveUnitSize_2400 = 96
    static let primitiveUnitSize_250 = 10
    static let primitiveUnitSize_2800 = 112
    static let primitiveUnitSize_300 = 12
    static let primitiveUnitSize_3200 = 128
    static let primitiveUnitSize_350 = 14
    static let primitiveUnitSize_400 = 16
    static let primitiveUnitSize_500 = 20
    static let primitiveUnitSize_600 = 24
    static let primitiveUnitSize_700 = 28
    static let primitiveUnitSize_800 = 32
    static let primitiveUnitSize_900 = 36
    static let semanticBorderRadius2 = 2
    static let semanticBorderRadius4 = 4
    static let semanticBorderRadius8 = 8
    static let semanticBorderRadius12 = 12
    static let semanticBorderRadius16 = 16
    static let semanticBorderRadius20 = 20
    static let semanticBorderRadiusFull = 9999
    static let semanticBorderWidth1 = 1
    static let semanticBorderWidth2 = 2
    static let semanticBorderWidth4 = 4
    static let semanticBorderWidthInput = 0.6000000238418579
    static let semanticSpacing0 = 0
    static let semanticSpacing2 = 2
    static let semanticSpacing4 = 4
    static let semanticSpacing6 = 6
    static let semanticSpacing8 = 8
    static let semanticSpacing10 = 10
    static let semanticSpacing12 = 12
    static let semanticSpacing14 = 14
    static let semanticSpacing16 = 16
    static let semanticSpacing20 = 20
    static let semanticSpacing24 = 24
    static let semanticSpacing32 = 32
    static let semanticSpacing36 = 36
    static let semanticSpacing40 = 40
    static let semanticSpacing48 = 48
    static let semanticSpacing64 = 64
    static let text_stylesBody_2xl_boldLineHeight = 150
    static let text_stylesBody_2xl_boldLetterSpacing = -0.6000000238418579
    static let text_stylesBody_2xl_mediumLineHeight = 150
    static let text_stylesBody_2xl_mediumLetterSpacing = -0.6000000238418579
    static let text_stylesBody_2xl_reguralLineHeight = 150
    static let text_stylesBody_2xl_reguralLetterSpacing = -0.6000000238418579
    static let text_stylesBody_2xl_semiboldLineHeight = 150
    static let text_stylesBody_2xl_semiboldLetterSpacing = -0.6000000238418579
    static let text_stylesBody_lg_boldLineHeight = 150
    static let text_stylesBody_lg_boldLetterSpacing = -0.6000000238418579
    static let text_stylesBody_lg_mediumLineHeight = 150
    static let text_stylesBody_lg_mediumLetterSpacing = -0.6000000238418579
    static let text_stylesBody_lg_reguralLineHeight = 150
    static let text_stylesBody_lg_reguralLetterSpacing = -0.6000000238418579
    static let text_stylesBody_lg_semiboldLineHeight = 150
    static let text_stylesBody_lg_semiboldLetterSpacing = -0.6000000238418579
    static let text_stylesBody_md_boldLineHeight = 150
    static let text_stylesBody_md_boldLetterSpacing = -0.6000000238418579
    static let text_stylesBody_md_mediumLineHeight = 150
    static let text_stylesBody_md_mediumLetterSpacing = -0.6000000238418579
    static let text_stylesBody_md_reguralLineHeight = 150
    static let text_stylesBody_md_reguralLetterSpacing = -0.6000000238418579
    static let text_stylesBody_md_semiboldLineHeight = 150
    static let text_stylesBody_md_semiboldLetterSpacing = -0.6000000238418579
    static let text_stylesBody_md_strikethroughLineHeight = 150
    static let text_stylesBody_md_strikethroughLetterSpacing = -0.6000000238418579
    static let text_stylesBody_md_underlineLineHeight = 150
    static let text_stylesBody_md_underlineLetterSpacing = -0.6000000238418579
    static let text_stylesBody_sm_boldLineHeight = 150
    static let text_stylesBody_sm_boldLetterSpacing = -0.6000000238418579
    static let text_stylesBody_sm_mediumLineHeight = 150
    static let text_stylesBody_sm_mediumLetterSpacing = -0.6000000238418579
    static let text_stylesBody_sm_reguralLineHeight = 150
    static let text_stylesBody_sm_reguralLetterSpacing = -0.6000000238418579
    static let text_stylesBody_sm_strikethroughLineHeight = 150
    static let text_stylesBody_sm_strikethroughLetterSpacing = -0.6000000238418579
    static let text_stylesBody_sm_underlineLineHeight = 150
    static let text_stylesBody_sm_underlineLetterSpacing = -0.6000000238418579
    static let text_stylesBody_xl_boldLineHeight = 150
    static let text_stylesBody_xl_boldLetterSpacing = -0.6000000238418579
    static let text_stylesBody_xl_mediumLineHeight = 150
    static let text_stylesBody_xl_mediumLetterSpacing = -0.6000000238418579
    static let text_stylesBody_xl_reguralLineHeight = 150
    static let text_stylesBody_xl_reguralLetterSpacing = -0.6000000238418579
    static let text_stylesBody_xl_semiboldLineHeight = 150
    static let text_stylesBody_xl_semiboldLetterSpacing = -0.6000000238418579
    static let text_stylesBody_xs_mediumLineHeight = 150
    static let text_stylesBody_xs_mediumLetterSpacing = -0.6000000238418579
    static let text_stylesBody_xs_regularLineHeight = 150
    static let text_stylesBody_xs_regularLetterSpacing = -0.6000000238418579
    static let text_stylesBody_xs_strikethroughLineHeight = 150
    static let text_stylesBody_xs_strikethroughLetterSpacing = -0.6000000238418579
    static let text_stylesBody_xs_underlineLineHeight = 150
    static let text_stylesBody_xs_underlineLetterSpacing = -0.6000000238418579
    static let text_stylesHeading_heading_2xlLineHeight = 150
    static let text_stylesHeading_heading_2xlLetterSpacing = -0.6000000238418579
    static let text_stylesHeading_heading_3xlLineHeight = 150
    static let text_stylesHeading_heading_3xlLetterSpacing = -0.6000000238418579
    static let text_stylesHeading_heading_lgLineHeight = 150
    static let text_stylesHeading_heading_lgLetterSpacing = -0.6000000238418579
    static let text_stylesHeading_heading_mdLineHeight = 150
    static let text_stylesHeading_heading_mdLetterSpacing = -0.6000000238418579
    static let text_stylesHeading_heading_smLineHeight = 150
    static let text_stylesHeading_heading_smLetterSpacing = -0.6000000238418579
    static let text_stylesHeading_heading_xlLineHeight = 150
    static let text_stylesHeading_heading_xlLetterSpacing = -0.6000000238418579
  }

  class Font_ {
    static let text_stylesBody_2xl_bold = Font.custom("Pretendard", size: 18)
    static let text_stylesBody_2xl_medium = Font.custom("Pretendard", size: 18)
    static let text_stylesBody_2xl_regural = Font.custom("Pretendard", size: 18)
    static let text_stylesBody_2xl_semibold = Font.custom("Pretendard", size: 18)
    static let text_stylesBody_lg_bold = Font.custom("Pretendard", size: 14)
    static let text_stylesBody_lg_medium = Font.custom("Pretendard", size: 14)
    static let text_stylesBody_lg_regural = Font.custom("Pretendard", size: 14)
    static let text_stylesBody_lg_semibold = Font.custom("Pretendard", size: 14)
    static let text_stylesBody_md_bold = Font.custom("Pretendard", size: 13)
    static let text_stylesBody_md_medium = Font.custom("Pretendard", size: 13)
    static let text_stylesBody_md_regural = Font.custom("Pretendard", size: 13)
    static let text_stylesBody_md_semibold = Font.custom("Pretendard", size: 13)
    static let text_stylesBody_md_strikethrough = Font.custom("Pretendard", size: 13)
    static let text_stylesBody_md_underline = Font.custom("Pretendard", size: 13)
    static let text_stylesBody_sm_bold = Font.custom("Pretendard", size: 12)
    static let text_stylesBody_sm_medium = Font.custom("Pretendard", size: 12)
    static let text_stylesBody_sm_regural = Font.custom("Pretendard", size: 12)
    static let text_stylesBody_sm_strikethrough = Font.custom("Pretendard", size: 12)
    static let text_stylesBody_sm_underline = Font.custom("Pretendard", size: 12)
    static let text_stylesBody_xl_bold = Font.custom("Pretendard", size: 16)
    static let text_stylesBody_xl_medium = Font.custom("Pretendard", size: 16)
    static let text_stylesBody_xl_regural = Font.custom("Pretendard", size: 16)
    static let text_stylesBody_xl_semibold = Font.custom("Pretendard", size: 16)
    static let text_stylesBody_xs_medium = Font.custom("Pretendard", size: 10)
    static let text_stylesBody_xs_regular = Font.custom("Pretendard", size: 10)
    static let text_stylesBody_xs_strikethrough = Font.custom("Pretendard", size: 10)
    static let text_stylesBody_xs_underline = Font.custom("Pretendard", size: 10)
    static let text_stylesHeading_heading_2xl = Font.custom("Pretendard", size: 30)
    static let text_stylesHeading_heading_3xl = Font.custom("Pretendard", size: 36)
    static let text_stylesHeading_heading_lg = Font.custom("Pretendard", size: 20)
    static let text_stylesHeading_heading_md = Font.custom("Pretendard", size: 14)
    static let text_stylesHeading_heading_sm = Font.custom("Pretendard", size: 13)
    static let text_stylesHeading_heading_xl = Font.custom("Pretendard", size: 24)
  }


}